import rclpy
from rclpy.node import Node
from std_msgs.msg import Float64MultiArray

class TestLocation(Node):
    def __init__(self):
        super().__init__('test_location')
        self.publisher = self.create_publisher(Float64MultiArray, 'pos_enu', 10)
        
        # Updated route for LTI track
        self.route = [
            (40.86291931, -77.83416471),
            (40.86291518, -77.83417184),
            (40.86291105, -77.83417897),
            (40.86290692, -77.8341861),
            (40.86290279, -77.83419323),
            (40.86289866, -77.83420036),
            (40.86289453, -77.8342075),
            (40.86289039, -77.83421463),
            (40.86288626, -77.83422176),
            (40.86288213, -77.83422889),
            (40.862878, -77.83423602),
            (40.86287387, -77.83424315),
            (40.86286974, -77.83425029),
            (40.86286561, -77.83425742),
            (40.86286148, -77.83426455),
            (40.86285734, -77.83427168),
            (40.86285321, -77.83427881),
            (40.86284908, -77.83428594),
            (40.86284495, -77.83429307),
            (40.86284082, -77.83430021),
            (40.86283669, -77.83430734),
            (40.86283256, -77.83431447),
            (40.86282843, -77.8343216),
            (40.8628243, -77.83432873),
            (40.86282016, -77.83433586),
            (40.86281603, -77.834343),
            (40.8628119, -77.83435013),
            (40.86280777, -77.83435726),
            (40.86280364, -77.83436439),
            (40.86279951, -77.83437152),
            (40.86279538, -77.83437865),
            (40.86279125, -77.83438578),
            (40.86278712, -77.83439292),
            (40.86278298, -77.83440005),
            (40.86277885, -77.83440718),
            (40.86277472, -77.83441431),
            (40.86277059, -77.83442144),
            (40.86276646, -77.83442857),
            (40.86276233, -77.8344357),
            (40.8627582, -77.83444284),
            (40.86275407, -77.83444997),
            (40.86274994, -77.8344571),
            (40.8627458, -77.83446423),
            (40.86274167, -77.83447136),
            (40.86273754, -77.83447849),
            (40.86273341, -77.83448563),
            (40.86272928, -77.83449276),
            (40.86272515, -77.83449989),
            (40.86272102, -77.83450702),
            (40.86271689, -77.83451415),
            (40.86271275, -77.83452128),
            (40.86270862, -77.83452841),
            (40.86270449, -77.83453555),
            (40.86270036, -77.83454268),
            (40.86269623, -77.83454981),
            (40.8626921, -77.83455694),
            (40.86268797, -77.83456407),
            (40.86268384, -77.8345712),
            (40.86267971, -77.83457833),
            (40.86267557, -77.83458547),
            (40.86267144, -77.8345926),
            (40.86266731, -77.83459973),
            (40.86266318, -77.83460686),
            (40.86265905, -77.83461399),
            (40.86265492, -77.83462112),
            (40.86265079, -77.83462825),
            (40.86264666, -77.83463539),
            (40.86264253, -77.83464253),
            (40.86263841, -77.83464967),
            (40.86263429, -77.83465681),
            (40.86263016, -77.83466395),
            (40.86262604, -77.83467108),
            (40.86262192, -77.83467822),
            (40.86261779, -77.83468536),
            (40.86261367, -77.8346925),
            (40.86260955, -77.83469964),
            (40.86260543, -77.83470678),
        ]
        
        self.index = 0
        # Timer set to publish every 3 seconds
        self.timer = self.create_timer(0.1, self.timer_callback)

    def timer_callback(self):
        if self.index < len(self.route):
            latitude, longitude = self.route[self.index]
            msg = Float64MultiArray()
            msg.data = [latitude, longitude]
            self.publisher.publish(msg)
            self.get_logger().info(f"Published position: Latitude={latitude}, Longitude={longitude}")
            self.index += 1
        else:
            self.get_logger().info("Route completed")
            self.destroy_node()

def main(args=None):
    rclpy.init(args=args)
    node = TestLocation()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
